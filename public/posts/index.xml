<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on chrsm.org</title><link>https://chrsm.org/posts/</link><description>Recent content in Posts on chrsm.org</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 10 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chrsm.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Taking a Break</title><link>https://chrsm.org/2022/09/10/taking-a-break/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://chrsm.org/2022/09/10/taking-a-break/</guid><description>I&amp;rsquo;m taking an extended break from writing here.
For most of 2021, I didn&amp;rsquo;t write at all. In 2022, I wanted to be productive. That hasn&amp;rsquo;t happened, obviously. I don&amp;rsquo;t really think that this matters. This is a &amp;ldquo;blog&amp;rdquo; after all, not a useful site for detailed information.
While it is counterintuitive to some degree - I could simply stop posting and not say anything - my belief is that someone out there might see this and benefit.</description></item><item><title>neovim: refactored config</title><link>https://chrsm.org/2022/04/30/neovim-refactored-config/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://chrsm.org/2022/04/30/neovim-refactored-config/</guid><description>Roughly two years ago, I wrote about what Vim plugins I use. At that time I was using Neovim much as I had always used Vim before. Since then, Neovim has evolved and so has the ecosystem of plugins around it.
In late 2021, I finally refactored my vimrc into Lua - more specifically, writing it in Yuescript and compiling it into Lua. Lua is definitely one of my favorite languages, but yue has quickly become my quick-and-dirty scripting language of choice.</description></item><item><title>Opinion: VCS Commits</title><link>https://chrsm.org/2022/02/28/opinion-vcs-commits/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>https://chrsm.org/2022/02/28/opinion-vcs-commits/</guid><description>Preface I have some strongly-held beliefs about commit messages in VCS. For obvious reasons, I tend to use git - but I believe that the core ideas extend to any VCS and are not specific to git.
That being said, I can&amp;rsquo;t say that I always follow this guide - like any other human, I am prone to mistakes, and some things don&amp;rsquo;t warrant such care.
Bad examples of commit messages, ahead of time, for transparency:</description></item><item><title>Experimenting w/gamedev: Part 4 - Behavior System</title><link>https://chrsm.org/2021/08/06/experimenting-w/gamedev-part-4-behavior-system/</link><pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate><guid>https://chrsm.org/2021/08/06/experimenting-w/gamedev-part-4-behavior-system/</guid><description>Last time I talked about my gamedev exploration, I decided that I wasn&amp;rsquo;t going to talk about LOVE2D specifically. Love is what I am using as the foundation, but at least for now I don&amp;rsquo;t have anything Love-specific that is useful enough to share&amp;hellip;
Anyway, a week or so ago I decided I wanted to implement some rudimentary behaviors for NPCs in the game. Making the world feel &amp;ldquo;alive&amp;rdquo; is pretty important to me.</description></item><item><title>Experimenting w/building a game: Part 3 - LFS, Maps</title><link>https://chrsm.org/2021/07/25/experimenting-w/building-a-game-part-3-lfs-maps/</link><pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate><guid>https://chrsm.org/2021/07/25/experimenting-w/building-a-game-part-3-lfs-maps/</guid><description>I took a break from working on a game for several months. Work has kept me incredibly busy, as I have transitioned from a sr. engineer over to an engineer manager. I write a lot less code for work nowadays, but thankfully I will always have side projects!
Last time I talked about LOVE2D, I explained how I was managing non-git dependencies. Today, I&amp;rsquo;ll be touching on two topics: asset storage and maps.</description></item><item><title>Experimenting with LOVE2D: Part 2 (Dependencies)</title><link>https://chrsm.org/2020/08/24/experimenting-with-love2d-part-2-dependencies/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://chrsm.org/2020/08/24/experimenting-with-love2d-part-2-dependencies/</guid><description>Earlier this month, I started experimenting with LOVE2D and how I&amp;rsquo;d develop a game. There&amp;rsquo;s a lot to take in and I&amp;rsquo;m really still learning the basics in the spare time that I have.
One of the things that I&amp;rsquo;m not a big fan of is that Lua doesn&amp;rsquo;t have a standard package manager - there&amp;rsquo;s Luarocks, but very few LOVE-related packages actually have a rockspec. I&amp;rsquo;m still working out how to include Luarocks packages properly within LOVE.</description></item><item><title>Experimenting with LOVE2D: Part 1</title><link>https://chrsm.org/2020/08/05/experimenting-with-love2d-part-1/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://chrsm.org/2020/08/05/experimenting-with-love2d-part-1/</guid><description>Recently, I found an urge to make a game. I&amp;rsquo;m not going to talk about the story/world building stuff here for now, just some of the technical aspects.
I have zero experience writing any type of game software, so I expect this to be a project that takes forever. It is entirely possible that it never actually becomes a reality, but for the time being I am actually having fun learning the basics.</description></item><item><title>vim plugins I use</title><link>https://chrsm.org/2020/03/02/vim-plugins-i-use/</link><pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate><guid>https://chrsm.org/2020/03/02/vim-plugins-i-use/</guid><description>I saw a post on lobsters that piqued my interest. Peter over at catonmat.net made a large list of vim plugins that they use.
It seems like a large amount of plugins - but everyone has their own set of preferences as to how they work, and I&amp;rsquo;d wager a guess that they&amp;rsquo;re better at vim than I&amp;rsquo;ll ever be ;) I&amp;rsquo;m the kind of guy who presses j 15 times much more often than ctrl-f and I don&amp;rsquo;t often use my leader key.</description></item><item><title>Streaming from OBS to RTMP server for recording</title><link>https://chrsm.org/2020/02/11/streaming-from-obs-to-rtmp-server-for-recording/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://chrsm.org/2020/02/11/streaming-from-obs-to-rtmp-server-for-recording/</guid><description>At $DAYJOB, I wanted to be able to share a recording of my workflow. My ISP is pretty awful, though, so uploading a recording with decent quality can take an enormous amount of time. My idea was to stream this somewhere that would save it for me - if it uploads as it goes, it&amp;rsquo;s much less effort to share than uploading a 500MB file.
I know that services like Twitch can save a copy of your stream for later viewing, but I don&amp;rsquo;t want to stream to the public.</description></item><item><title>Go: small tips, advice, and some gotchas</title><link>https://chrsm.org/2019/08/27/go-small-tips-advice-and-some-gotchas/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><guid>https://chrsm.org/2019/08/27/go-small-tips-advice-and-some-gotchas/</guid><description>Go is a very easy language to learn and quickly become productive with. As with any language, though, lack of experience can easily make even the simplest of code hard to maintain.
This post is intended to help with:
common mistakes mechanics of certain builtins do-s and don&amp;rsquo;t-s I will not pretend to be an expert nor a 10xer ninja. Feel free to correct me if I make any silly claims or am wrong.</description></item><item><title>Docker, Compose, Go</title><link>https://chrsm.org/2018/09/05/docker-compose-go/</link><pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate><guid>https://chrsm.org/2018/09/05/docker-compose-go/</guid><description>It has been a month since I set chrsm.org up again. Seems like a good time to write something.
At $DAYJOB, we have a monorepo (monorepos are SO hot right now) consisting of several different services - monoliths, microservices, things that are highly interdependent and some that are decoupled.
Not everything is written in the same language and we don&amp;rsquo;t expect everyone to have a local environment set up with exact versions of tools that we use, so utilities like Docker help ensure that all developers have the same tools&amp;hellip; at least, that is what we strive for.</description></item><item><title>[archive] Environments &amp; Go</title><link>https://chrsm.org/2014/05/20/archive-environments-go/</link><pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate><guid>https://chrsm.org/2014/05/20/archive-environments-go/</guid><description>I recently found this extremely old post. It&amp;rsquo;s not particularly relevant anymore, but history is history.
Every once in a while when I set up a new Go project, I forget how exactly I had set up my previous project&amp;rsquo;s environment to just &amp;ldquo;work&amp;rdquo; how I desire it to.
Hopefully this post helps you, too.
Like many, I was initially excited that Go (almost) forces a strict environment setup: you put code in a workspace, and Go behaves as you expect it to.</description></item><item><title>[archive] Static analysis tools for PHP</title><link>https://chrsm.org/2013/05/05/archive-static-analysis-tools-for-php/</link><pubDate>Sun, 05 May 2013 00:00:00 +0000</pubDate><guid>https://chrsm.org/2013/05/05/archive-static-analysis-tools-for-php/</guid><description>I believe in writing code that is easy to understand, easy to test, and easy to refactor.
Yes, I realize that the statement above is pretty general and open to interpretation. Not everyone needs external tools to ensure quality in their code&amp;hellip;but, I work on things from time to time that have absolutely no tests. No unit tests, no functional tests, no browser tests, no code quality analysis. Needless to say, some of those things make me want to tear my eyes out.</description></item></channel></rss>